---
alwaysApply: true
---

# 🧪 Test Structure & Organization

## 🎯 AAA Pattern (Arrange-Act-Assert)

**Structure ALL tests** with clear AAA sections.

### ✅ CORRECT - AAA Structure
```typescript
test('should add item to cart', async ({ page }) => {
  // Arrange
  const productPage = new ProductPage(page);
  const cartPage = new CartPage(page);
  await productPage.goto('/products/123');
  
  // Act
  await productPage.addToCart();
  await page.goto('/cart');
  
  // Assert
  await expect(cartPage.cartItems).toHaveCount(1);
  await expect(cartPage.total).toContainText('$29.99');
});
```

### ❌ WRONG - No Clear Structure
```typescript
// ❌ WRONG - Mixed structure
test('should add item to cart', async ({ page }) => {
  const productPage = new ProductPage(page);
  await productPage.goto('/products/123');
  await productPage.addToCart();
  await expect(page.getByTestId('cart-count')).toHaveText('1');
  await page.goto('/cart');
  await expect(page.getByTestId('total')).toContainText('$29.99');
});
```

---

## 🏷️ Test Tags & Organization

### Test Tagging Strategy
```typescript
// ✅ CORRECT - Tagged test suites
test.describe('Product Search @smoke', () => {
  test('should find products by keyword', async ({ page }) => {
    // test code
  });
});

test.describe('Advanced Filters @regression', () => {
  test('should filter by price range', async ({ page }) => {
    // test code
  });
});

test.describe('User Authentication @critical', () => {
  test('should login with valid credentials', async ({ page }) => {
    // test code
  });
});
```

### Tag Categories
- **`@smoke`** - Critical path tests (run on every PR)
- **`@regression`** - Full feature tests (run nightly)
- **`@critical`** - Business-critical functionality
- **`@api`** - API-only tests
- **`@e2e`** - End-to-end UI tests
- **`@flaky`** - Known flaky tests (exclude from CI)

### Running Tagged Tests
```bash
# Run specific tags
npm run test -- --grep @smoke
npm run test -- --grep @regression

# Exclude flaky tests
npm run test -- --grep-invert @flaky

# Run multiple tags
npm run test -- --grep "@smoke|@critical"
```

---

## 📋 Test Organization Patterns

### 1. Feature-Based Organization
```typescript
// tests/e2e/auth/login.spec.ts
test.describe('Login Flow @smoke', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/login');
  });

  test('should login with valid credentials', async ({ page }) => {
    // Arrange
    const loginPage = new LoginPage(page);
    const validUser = testData.users.valid;

    // Act
    await loginPage.login(validUser.email, validUser.password);

    // Assert
    await expect(page).toHaveURL(/dashboard/);
    await expect(page.getByText('Welcome')).toBeVisible();
  });

  test('should show error for invalid credentials', async ({ page }) => {
    // Arrange
    const loginPage = new LoginPage(page);

    // Act
    await loginPage.login('invalid@test.com', 'wrong');

    // Assert
    await expect(loginPage.getErrorMessage()).toContain('Invalid credentials');
  });
});
```

### 2. API Test Organization
```typescript
// tests/api/users/user-crud.spec.ts
test.describe('User API @api', () => {
  let userApi: UserApiClient;

  test.beforeAll(async ({ request }) => {
    userApi = new UserApiClient(request);
  });

  test('should create and retrieve user', async () => {
    // Arrange
    const newUser = { name: 'John', email: 'john@test.com' };
    
    // Act
    const created = await userApi.createUser(newUser);
    const retrieved = await userApi.getUser(created.id);
    
    // Assert
    expect(retrieved).toMatchObject(newUser);
    
    // Cleanup
    await userApi.deleteUser(created.id);
  });
});
```

---

## 🔄 Test Lifecycle Management

### Setup and Teardown Patterns
```typescript
// ✅ CORRECT - API-based setup
test.describe('User Workflows', () => {
  let testUser: User;

  test.beforeAll(async ({ request }) => {
    // Fast API setup
    testUser = await createUserViaAPI(request);
  });

  test.afterAll(async ({ request }) => {
    // Cleanup via API
    await deleteUserViaAPI(request, testUser.id);
  });

  test('should complete user journey', async ({ page }) => {
    // Test uses pre-created user
  });
});
```

### Independent Tests
```typescript
// ✅ CORRECT - Independent tests with setup
test.describe('User Management', () => {
  test.beforeEach(async ({ request }) => {
    // Setup: Create test user via API
    await createTestUser(request);
  });

  test('should login with created user', async ({ page }) => {
    const loginPage = new LoginPage(page);
    await loginPage.goto();
    await loginPage.login(testUser.email, testUser.password);
    await expect(page).toHaveURL(/dashboard/);
  });

  test('should checkout as created user', async ({ page }) => {
    // Setup: Login first
    await loginAsTestUser(page);
    
    // Test checkout functionality
    const checkoutPage = new CheckoutPage(page);
    await checkoutPage.completeCheckout();
    await expect(page).toHaveURL(/success/);
  });
});
```

### Sequential Tests (When Needed)
```typescript
// ✅ CORRECT - Sequential tests when required
test.describe.serial('Multi-step Workflow', () => {
  test('step 1: should create order', async ({ page }) => {
    // Creates order that next test depends on
  });

  test('step 2: should process payment', async ({ page }) => {
    // Depends on order from step 1
  });

  test('step 3: should send confirmation', async ({ page }) => {
    // Depends on payment from step 2
  });
});
```

---

## 📊 Test Data Management

### Test Data in Tests
```typescript
// ✅ CORRECT - Test data management
test.describe('Product Search', () => {
  test('should find products by category', async ({ page }) => {
    // Arrange
    const searchPage = new SearchPage(page);
    const testCategory = 'electronics';
    
    // Act
    await searchPage.goto();
    await searchPage.searchByCategory(testCategory);
    
    // Assert
    await expect(searchPage.results).toHaveCount(5);
    await expect(searchPage.categoryFilter).toHaveText(testCategory);
  });
});
```

### Dynamic Test Data
```typescript
// ✅ CORRECT - Dynamic test data
test.describe('User Registration', () => {
  const testUsers = [
    { name: 'John Doe', email: 'john@test.com' },
    { name: 'Jane Smith', email: 'jane@test.com' },
    { name: 'Bob Johnson', email: 'bob@test.com' }
  ];

  for (const user of testUsers) {
    test(`should register user: ${user.name}`, async ({ page }) => {
      // Arrange
      const registrationPage = new RegistrationPage(page);
      
      // Act
      await registrationPage.goto();
      await registrationPage.register(user.name, user.email);
      
      // Assert
      await expect(page).toHaveURL(/success/);
    });
  }
});
```

---

## 🎯 Test Best Practices

### 1. Keep Tests Short
```typescript
// ✅ CORRECT - Simple, focused test
test('should login with valid credentials', async ({ page }) => {
  const loginPage = new LoginPage(page);
  await loginPage.goto();
  await loginPage.login(process.env.TEST_EMAIL!, process.env.TEST_PASSWORD!);
  await expect(page).toHaveURL(/dashboard/);
});

// ❌ WRONG - Overly complex test
test('should do everything', async ({ page }) => {
  // 50+ lines of mixed functionality
  // Login + checkout + payment + email verification + etc.
});
```

### 2. Keep Tests Focused
```typescript
// ✅ CORRECT - Separate focused tests
test.describe('Checkout Flow', () => {
  test('should complete checkout with valid payment', async ({ page }) => {
    // Only tests checkout functionality
  });
});

test.describe('Coupon System', () => {
  test('should apply valid coupon code', async ({ page }) => {
    // Only tests coupon functionality
  });
});

// ❌ WRONG - Testing multiple features
test('should checkout and apply coupon', async ({ page }) => {
  // If this fails, unclear which feature is broken
});
```

### 3. Keep Tests Independent
```typescript
// ✅ CORRECT - Independent tests
test.describe('User Management', () => {
  test('should create user', async ({ page }) => {
    // Creates user1
  });

  test('should login with user1', async ({ page }) => {
    // Depends on previous test - will fail if run alone
  });
});
```

**Benefits of independence:**
- **Parallel execution**: Tests can run simultaneously
- **Clear failures**: Each test is self-contained
- **Flexible ordering**: Tests can run in any order
- **Easier maintenance**: Changes don't cascade

---

## 📋 Test Structure Checklist

### ✅ Required Elements
- [ ] **Clear AAA structure** (Arrange-Act-Assert)
- [ ] **Proper test tags** for categorization
- [ ] **Descriptive test names** that explain the scenario
- [ ] **Independent tests** with proper setup/teardown
- [ ] **Focused test scope** (one feature per test)

### ✅ Best Practices
- [ ] **Use Page Objects** for all UI interactions
- [ ] **API-based setup** for faster, more reliable tests
- [ ] **Proper test data** management
- [ ] **Clear assertions** with meaningful error messages
- [ ] **Appropriate test lifecycle** management

### ✅ Code Quality
- [ ] **Consistent formatting** and structure
- [ ] **Proper imports** and dependencies
- [ ] **TypeScript types** for test data
- [ ] **No hardcoded values** in tests
- [ ] **Reusable test utilities** when appropriate