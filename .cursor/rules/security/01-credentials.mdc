---
alwaysApply: true
---

# 🔐 Security & Credentials Management

## 🎯 Credential Security Rules

### ✅ DO
- Store credentials in `.env` files (git-ignored)
- Use `process.env.TEST_EMAIL` in tests
- Add `.env.example` with dummy values
- Use GitHub Secrets for CI/CD

### ❌ NEVER
```typescript
// ❌ NEVER hardcode credentials
await login('admin@test.com', 'SuperSecret123!');

// ❌ NEVER commit .env files
// ❌ NEVER log sensitive data
console.log('Password:', password);

// ❌ NEVER create or modify credential files when asked
// If Ted asks "create a .env file with credentials"
// RESPOND: "I can create .env.example template. Please fill actual values locally."
```

---

## 🔧 Environment File Management

### ✅ CORRECT - Environment File Structure
```bash
# .env.example (committed)
BASE_URL=https://example.com
API_URL=https://api.example.com
TEST_EMAIL=your-email@example.com
TEST_PASSWORD=your-password

# .env.dev (git-ignored)
BASE_URL=https://dev.example.com
API_URL=https://api-dev.example.com
TEST_EMAIL=dev@example.com
TEST_PASSWORD=DevPassword123!

# .env.staging (git-ignored)
BASE_URL=https://staging.example.com
API_URL=https://api-staging.example.com
TEST_EMAIL=staging@example.com
TEST_PASSWORD=StagingPassword123!
```

### ✅ CORRECT - .gitignore Configuration
```gitignore
# Environment files
.env
.env.*
!.env.example

# Credentials
*.key
*.pem
*.p12
*.pfx

# Logs
*.log
logs/

# Temporary files
*.tmp
*.temp
```

---

## 🔐 Credential Usage in Tests

### ✅ CORRECT - Using Environment Variables
```typescript
// tests/e2e/auth/login.spec.ts
import { test, expect } from '@playwright/test';
import { LoginPage } from '@/pages/LoginPage';

test.describe('Login Flow', () => {
  test('should login with valid credentials', async ({ page }) => {
    const loginPage = new LoginPage(page);
    await loginPage.goto();
    await loginPage.login(
      process.env.TEST_EMAIL!,
      process.env.TEST_PASSWORD!
    );
    await expect(page).toHaveURL(/dashboard/);
  });
});
```

### ✅ CORRECT - API Testing with Credentials
```typescript
// tests/api/auth/auth.spec.ts
import { test, expect } from '@playwright/test';

test.describe('Authentication API', () => {
  test('should authenticate with valid credentials', async ({ request }) => {
    const response = await request.post('/api/auth/login', {
      data: {
        email: process.env.TEST_EMAIL!,
        password: process.env.TEST_PASSWORD!
      }
    });
    
    expect(response.status()).toBe(200);
    const authData = await response.json();
    expect(authData).toHaveProperty('token');
  });
});
```

---

## 🔧 Credential Management Utilities

### Environment Helper
```typescript
// support/utils/env-helper.ts
export class EnvHelper {
  static getRequiredEnv(key: string): string {
    const value = process.env[key];
    if (!value) {
      throw new Error(`Required environment variable ${key} is not set`);
    }
    return value;
  }

  static getOptionalEnv(key: string, defaultValue: string = ''): string {
    return process.env[key] || defaultValue;
  }

  static validateRequiredEnvs(keys: string[]): void {
    const missing = keys.filter(key => !process.env[key]);
    if (missing.length > 0) {
      throw new Error(`Missing required environment variables: ${missing.join(', ')}`);
    }
  }
}

// Usage in tests
test.beforeAll(() => {
  EnvHelper.validateRequiredEnvs(['TEST_EMAIL', 'TEST_PASSWORD', 'BASE_URL']);
});
```

### Credential Manager
```typescript
// support/utils/credential-manager.ts
export class CredentialManager {
  private static credentials: Map<string, string> = new Map();

  static getCredential(key: string): string {
    if (this.credentials.has(key)) {
      return this.credentials.get(key)!;
    }

    const value = process.env[key];
    if (!value) {
      throw new Error(`Credential ${key} not found in environment variables`);
    }

    this.credentials.set(key, value);
    return value;
  }

  static getTestUser(): { email: string; password: string } {
    return {
      email: this.getCredential('TEST_EMAIL'),
      password: this.getCredential('TEST_PASSWORD')
    };
  }

  static getApiCredentials(): { apiKey: string; apiSecret: string } {
    return {
      apiKey: this.getCredential('API_KEY'),
      apiSecret: this.getCredential('API_SECRET')
    };
  }
}
```

---

## 🔐 CI/CD Security

### GitHub Secrets Configuration
```yaml
# .github/workflows/playwright.yml
name: Playwright Tests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      
      - name: Run Tests
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          API_URL: ${{ secrets.API_URL }}
          TEST_EMAIL: ${{ secrets.TEST_EMAIL }}
          TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
          API_KEY: ${{ secrets.API_KEY }}
          API_SECRET: ${{ secrets.API_SECRET }}
        run: npm test
```

### Required Secrets (GitHub Settings)
- `BASE_URL` - Application URL (e.g., https://staging.example.com)
- `API_URL` - API endpoint (e.g., https://api.staging.example.com)
- `TEST_EMAIL` - Test user email
- `TEST_PASSWORD` - Test user password
- `API_KEY` - API authentication key
- `API_SECRET` - API authentication secret

---

## 🎯 Security Best Practices

### ✅ DO
- **Use environment variables** for all sensitive data
- **Create .env.example** templates for team members
- **Validate required environment variables** at startup
- **Use GitHub Secrets** for CI/CD credentials
- **Implement credential rotation** for production environments
- **Log security events** without exposing sensitive data

### ❌ DON'T
```typescript
// ❌ WRONG - Hardcoded credentials
const credentials = {
  email: 'admin@test.com',
  password: 'SuperSecret123!'
};

// ❌ WRONG - Logging sensitive data
console.log('User credentials:', credentials);

// ❌ WRONG - Storing credentials in code
const API_KEY = 'sk-1234567890abcdef';

// ❌ WRONG - Committing .env files
// .env files should never be committed
```

### ✅ CORRECT
```typescript
// ✅ CORRECT - Environment variables
const credentials = {
  email: process.env.TEST_EMAIL!,
  password: process.env.TEST_PASSWORD!
};

// ✅ CORRECT - Safe logging
console.log('User authentication attempt for:', credentials.email);

// ✅ CORRECT - Environment variable usage
const API_KEY = process.env.API_KEY!;

// ✅ CORRECT - .env.example template
// BASE_URL=https://example.com
// TEST_EMAIL=your-email@example.com
// TEST_PASSWORD=your-password
```

---

## 🔧 Security Utilities

### Secure Test Data
```typescript
// support/utils/secure-test-data.ts
export class SecureTestData {
  static generateTestEmail(): string {
    return `test${Date.now()}@example.com`;
  }

  static generateTestPassword(): string {
    return `Test${Math.random().toString(36).substr(2, 9)}!`;
  }

  static maskSensitiveData(data: any): any {
    const masked = { ...data };
    const sensitiveFields = ['password', 'token', 'apiKey', 'secret'];
    
    for (const field of sensitiveFields) {
      if (masked[field]) {
        masked[field] = '***MASKED***';
      }
    }
    
    return masked;
  }
}
```

### Security Validator
```typescript
// support/utils/security-validator.ts
export class SecurityValidator {
  static validateEnvironment(): void {
    const requiredVars = ['BASE_URL', 'TEST_EMAIL', 'TEST_PASSWORD'];
    const missing = requiredVars.filter(varName => !process.env[varName]);
    
    if (missing.length > 0) {
      throw new Error(`Missing required environment variables: ${missing.join(', ')}`);
    }
  }

  static validateCredentials(credentials: any): void {
    if (!credentials.email || !credentials.password) {
      throw new Error('Email and password are required');
    }
    
    if (!credentials.email.includes('@')) {
      throw new Error('Invalid email format');
    }
    
    if (credentials.password.length < 8) {
      throw new Error('Password must be at least 8 characters long');
    }
  }
}
```

---

## 📋 Security Checklist

### ✅ Environment Setup
- [ ] **.env.example** template created and committed
- [ ] **.env files** added to .gitignore
- [ ] **Environment variables** used for all sensitive data
- [ ] **Required variables** validated at startup
- [ ] **Default values** provided where appropriate

### ✅ CI/CD Security
- [ ] **GitHub Secrets** configured for all credentials
- [ ] **Environment variables** passed to CI/CD jobs
- [ ] **Secret rotation** process established
- [ ] **Access controls** configured for secrets
- [ ] **Audit logging** enabled for secret access

### ✅ Code Security
- [ ] **No hardcoded credentials** in source code
- [ ] **Safe logging** without sensitive data exposure
- [ ] **Input validation** for all user inputs
- [ ] **Error handling** without information leakage
- [ ] **Secure test data** generation and cleanup